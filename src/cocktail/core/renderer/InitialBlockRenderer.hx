/*
	This file is part of Cocktail http://www.silexlabs.org/groups/labs/cocktail/
	This project is Â© 2010-2011 Silex Labs and is released under the GPL License:
	This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License (GPL) as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. 
	This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
	To read the license please visit http://www.gnu.org/copyleft/gpl.html
*/
package cocktail.core.renderer;

import cocktail.core.background.BackgroundManager;
import cocktail.core.dom.Node;
import cocktail.core.html.HTMLElement;
import cocktail.core.NativeElement;
import cocktail.core.geom.GeomData;
import cocktail.core.style.formatter.BlockFormattingContext;
import cocktail.core.style.formatter.FormattingContext;
import cocktail.core.style.StyleData;
import cocktail.core.style.CoreStyle;
import flash.Lib;
import haxe.Log;
import haxe.Timer;

/**
 * This is the ElementRenderer generated by a BodyHTMLElement
 * 
 * @author Yannick DOMINGUEZ
 */
class InitialBlockRenderer extends BlockBoxRenderer
{
	
	
	/**
	 * The NativeElements created when rendering
	 * this Document. They are runtime specific
	 */
	private var _nativeElements:Array<NativeElement>;
	
	/**
	 * class constructor. Set the viewport as the bounds
	 * of the ElementRenderer, as a BodyHTMLElement
	 * always covers all of the viewport
	 */
	public function new(node:Node) 
	{
		super(node);
		
		_nativeElements = new Array<NativeElement>();
		

		
		//in Flash, the Stage is always defined as no scale as the transformations
		//will be managed by Cocktail
		
		flash.Lib.current.stage.scaleMode = flash.display.StageScaleMode.NO_SCALE;
	}
	
	/**
	 * Render and position the background color and
	 * image of the element using runtime specific
	 * API and return an array of NativeElement from
	 * it
	 */
	override public function render():Array<NativeElement>
	{
		var backgroundManager:BackgroundManager = new BackgroundManager();
		
		var width:Float = cocktail.Lib.window.innerWidth;
		var height:Float = cocktail.Lib.window.innerHeight;
		
		_bounds.width = width;
		_bounds.height = height;
		
		//TODO : should only pass dimensions instead of bounds
		var backgrounds:Array<NativeElement> = backgroundManager.render(_bounds, _coreStyle);
		
		for (i in 0...backgrounds.length)
		{
			#if (flash9 || nme)
			backgrounds[i].x = globalBounds.x;
			backgrounds[i].y = globalBounds.y;
			#end
		}
	
		return backgrounds;
	}
	
	override public function attachLayer():Void
	{
		_layerRenderer = new LayerRenderer(this);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// OVERRIDEN PRIVATE RENDERING METHODS
	// attach/detach the rendered native elements to/from the flash Stage
	//////////////////////////////////////////////////////////////////////////////////////////

	private function attachNativeElement(nativeElement:NativeElement):Void
	{
		flash.Lib.current.addChild(nativeElement);
	}
	
	private function detachNativeElement(nativeElement:NativeElement):Void
	{
		flash.Lib.current.removeChild(nativeElement);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// OVERRIDEN PUBLIC INVALIDATION METHODS
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * The HTMLBodyElement doesn't have a parent, so when invalidated,
	 * it always schedule a layout using the window dimensions as
	 * its containing HTMLElement dimensions
	 */
	override public function invalidate(immediate:Bool = false):Void
	{
		//don't call if the body has already scheduled a layout, unless
		//an immediate layout is required
		if (this._isLayingOut == false || immediate == true)
		{
			this._isLayingOut = true;
			doInvalidate(immediate);
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * The Document is invalidated for instance when the
	 * DOM changes after adding/removing a child or when
	 * a style changes.
	 * When this happen, the Document needs to be layout
	 * and rendered again
	 * 
	 * @param immediate define wether the layout must be synchronous
	 * or asynchronous
	 */
	public function doInvalidate(immediate:Bool = false):Void
	{
		//either schedule an asynchronous layout and rendering, or layout
		//and render immediately
		if (immediate == false)
		{
			scheduleLayoutAndRender();
		}
		else
		{
			layoutAndRender();
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// PRIVATE RENDERING METHODS
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * As the name implies,
	 * layout the DOM, then render it
	 */
	private function layoutAndRender():Void
	{
		startLayout();
		startRendering();
	}
	

	
	/**
	 * Start the rendering of the rendering tree
	 * built during layout
	 * and attach the resulting nativeElements (background,
	 * border, embedded asset...) to the display root
	 * of the runtime (for instance the Stage in Flash)
	 */ 
	private function startRendering():Void
	{
		//first all the previous native elements
		//are detached
		detachNativeElements(_nativeElements);
		
		//start the rendering at the root layer renderer
		_nativeElements = _layerRenderer.render();
		attachNativeElements(_nativeElements);
	}
	
	/**
	 * Attach an array of NativeElement to the
	 * display root
	 */
	private function attachNativeElements(nativeElements:Array<NativeElement>):Void
	{
		for (i in 0...nativeElements.length)
		{
			attachNativeElement(nativeElements[i]);
		}
	}
	
	/**
	 * Remove an array of NativeElement from the
	 * display root
	 */
	private function detachNativeElements(nativeElements:Array<NativeElement>):Void
	{
		for (i in 0...nativeElements.length)
		{
			detachNativeElement(nativeElements[i]);
		}
	}
	
	/**
	 * Set a timer to trigger a layout and rendering of the HTML Document asynchronously.
	 * Setting a timer to execute the layout and rendering ensure that the layout only happen once when a series of style
	 * values are set or when many elements are attached/removed from the DOM, instead of happening for every change.
	 */
	private function scheduleLayoutAndRender():Void
	{
		var layoutAndRenderDelegate:Void->Void = layoutAndRender;
		
		//calling the methods 1 millisecond later is enough to ensure
		//that first all synchronous code is executed
		Timer.delay(function () { 
			layoutAndRenderDelegate();
		}, 1);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC LAYOUT METHODS
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Start the layout of all of the HTMLElements tree which set the bounds
	 * of the all of the rendring tree elements relative to their containing block.
	 * Then set the global bounds (relative to the window) for all of the elements
	 * of the rendering tree
	 * 
	 * TODO : should be on ElementRenderer for incremental layout
	 */
	public function startLayout():Void
	{
		var windowData:ContainingBlockData = getWindowData();
		
		//the first positioned parent of the body is always the viewport					
		var firstPositionedAncestorData:FirstPositionedAncestorData = {
			elements: new Array<ElementRenderer>(),
			data:windowData
		}
		
		//layout all the HTMLElements. After that they all know their bounds relative to the containing
		//blocks
		layout(getContainerBlockData(), windowData, firstPositionedAncestorData, _coreStyle.fontMetrics, null);
		//set the global bounds on the rendering tree. After that all the elements know their positions
		//relative to the window
		setGlobalOrigins(this,0,0, 0,0);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// PRIVATE LAYOUT METHODS
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Set the global bounds (relative to the window) of all the elements of the rendering tree, by
	 * traversing it recursively
	 * 
	 * TODO : should be on ElementRenderer instead for incremental layout
	 * 
	 * @param	elementRenderer the current node in the render tree onto which the global bounds are set
	 * @param	addedX the added x position for the normal flow
	 * @param	addedY the added y position for the norlam flow
	 * @param	addedPositionedX the added X position for positioned elements
	 * @param	addedPositionedY the added Y position for positioned elements
	 */
	private function setGlobalOrigins(elementRenderer:ElementRenderer, addedX:Float, addedY:Float, addedPositionedX:Float, addedPositionedY:Float):Void
	{
		//if the element establishes a new formatting context, then its
		//bounds must be added to the global x and y bounds for the normal flow
		if (elementRenderer.establishesNewFormattingContext() == true)
		{
			//if the element is positioned, it can either add its bounds
			//or positioned origin to the global x and y for normal flow. If it
			//uses its static position, it uses its bounds, else it uses its
			//positioned origin
			if (elementRenderer.isPositioned() == true)
			{
				//TODO : use globalBounds to determine which bounds to add ?
				if (elementRenderer.coreStyle.left != PositionOffset.cssAuto || elementRenderer.coreStyle.right != PositionOffset.cssAuto)
				{
					if (elementRenderer.coreStyle.computedStyle.position == absolute)
					{
						addedX += elementRenderer.positionedOrigin.x;
					}
					//here the positioned ElementRenderer is fixed and is placed
					//relative to the window. In this case, its x is not added
					//TODO : complet doc + check if necessary everywhere
					else
					{
						addedX = elementRenderer.positionedOrigin.x;
					}
					
				}
				else
				{
					addedX += elementRenderer.bounds.x;
				}
				
				if (elementRenderer.coreStyle.top != PositionOffset.cssAuto || elementRenderer.coreStyle.bottom != PositionOffset.cssAuto)
				{
					if (elementRenderer.coreStyle.computedStyle.position == absolute)
					{
						addedY += elementRenderer.positionedOrigin.y;
					}
					else
					{
						addedY = elementRenderer.positionedOrigin.y;
					}
				}
				else
				{
					addedY += elementRenderer.bounds.y;
				}
			}
			//if the element is not positioned or relatively positioned, it always add
			//its bounds to the global x and y flow
			else
			{
				addedX += elementRenderer.bounds.x;
				addedY += elementRenderer.bounds.y;
			}
		}
		
		//if the element is positioned, it must also add
		//its bounds to the global positioned origin
		if (elementRenderer.isPositioned() == true)
		{
			//absolutely positioned elements either add their static position
			//or their positioned origin
			if (elementRenderer.coreStyle.computedStyle.position != relative)
			{
				if (elementRenderer.coreStyle.left != PositionOffset.cssAuto || elementRenderer.coreStyle.right != PositionOffset.cssAuto)
				{
					if (elementRenderer.coreStyle.computedStyle.position == absolute)
					{
						addedPositionedX += elementRenderer.positionedOrigin.x;
					}
					else
					{
						addedPositionedX = elementRenderer.positionedOrigin.x;
					}
					
				}
				else
				{
					addedPositionedX += elementRenderer.bounds.x;
				}
				if (elementRenderer.coreStyle.top != PositionOffset.cssAuto || elementRenderer.coreStyle.bottom != PositionOffset.cssAuto)
				{
					if (elementRenderer.coreStyle.computedStyle.position == absolute)
					{
						addedPositionedY += elementRenderer.positionedOrigin.y;
					}
					else
					{
						addedPositionedY = elementRenderer.positionedOrigin.y;
					}
					
				}
				else
				{
					addedPositionedY += elementRenderer.bounds.y;
				}
			}
			//relative positioned elements always use their bounds, as the relative
			//offset is only applied at render time and isn't used in the bounds
			//computation
			else
			{
				addedPositionedX += elementRenderer.bounds.x;
				addedPositionedY += elementRenderer.bounds.y;
			}
		}
		
		//for its child of the element
		for (i in 0...elementRenderer.childNodes.length)
		{
			var child:ElementRenderer = cast(elementRenderer.childNodes[i]);
			
			//TODO : doc on added ody margin
			child.globalContainingBlockOrigin = {
				x: addedX + computedStyle.marginLeft,
				y : addedY + computedStyle.marginTop
			}
			
			child.globalPositionnedAncestorOrigin = {
				x: addedPositionedX + computedStyle.marginLeft,
				y : addedPositionedY + computedStyle.marginTop
			}
			
			//call the method recursively if the child has children itself
			if (child.hasChildNodes() == true)
			{
				setGlobalOrigins(child, addedX, addedY, addedPositionedX, addedPositionedY);
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// OVERRIDEN PRIVATE LAYOUT METHODS
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Overriden as the initial ElementRenderer always layout its positioned children as it is the root of the rendering tree
	 * 	
	 * TODO : check that the childrenFirstPositionedAncestorData data is the viewport data
	 */
	override private function layoutAbsolutelyPositionedChildrenIfNeeded(childrenFirstPositionedAncestorData:FirstPositionedAncestorData, viewportData:ContainingBlockData):Void
	{
		for (i in 0...childrenFirstPositionedAncestorData.elements.length)
		{
			var element:ElementRenderer = childrenFirstPositionedAncestorData.elements[i];
			//use the viewport dimensions both times
			layoutPositionedChild(element, childrenFirstPositionedAncestorData.data, viewportData);
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// OVERRIDEN PRIVATE HELPER METHODS
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * The dimensions of the initital ElementRenderer are always
	 * those of the window
	 */
	override private function getContainerBlockData():ContainingBlockData
	{
		return getWindowData();
	}
	
	/**
	 * The initital ElementRenderer is always a block container
	 */
	override public function isInlineLevel():Bool
	{
		return false;
	}
	
	
	/**
	 * The root of the runtime always starts a block formatting context
	 */
	override private function getFormattingContext(previousformattingContext:FormattingContext):FormattingContext
	{
		return new BlockFormattingContext(this);
	}
	
	/**
	 * The HTMLBodyElement always establishes a block formatting context
	 * for its children
	 */
	override public function establishesNewFormattingContext():Bool
	{
		return true;
	}
	
}